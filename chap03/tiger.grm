/*
 * THIS FILE IS ABSOLUTELY UNFINISHED AND NOT WORKING YET !!!
 *
 * TODO:
 *   * How to handle string and int as type?
 *   * Precedence of operators.
 *   * Associativity of operators.
 */

%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program

%left ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIV
%left UMINUS

%%

program: expression


/* EXPRESSIONS */

expression: lvalue
          | valueless_expression
          | NIL
          | sequencing
          | no_value_expression
          | INT
          | STRING
          | MINUS expression %prec UMINUS
          | function_call
          | arithmetic
          | comparison
          | boolean_operators
          | record_creation
          | array_creation
          | for
          | let


/* LVALUES */

lvalue: ID lvalue_extension

lvalue_extension: /* empty */
                | DOT ID lvalue_extension
                | LBRACK expression RBRACK lvalue_extension


/* TODO: procedure calls */
valueless_expression: assignment
                    | if_then
                    | while
                    | break
                    | if_then_else /* TODO: only sometimes is this valueless */

sequencing: LPAREN expression_sequence RPAREN

no_value_expression: LPAREN RPAREN
                   | LET declaration_sequence IN END

function_call: ID LPAREN RPAREN
             | ID LPAREN expression_list_commad RPAREN

arithmetic: expression PLUS expression
          | expression MINUS expression
          | expression TIMES expression
          | expression DIVIDE expression

/* TODO: EQ and NEQ can also be applied to two record or array operands of the same type */
comparison: expression EQ expression
          | expression NEQ expression
          | expression GT expression
          | expression LT expression 
          | expression GE expression 
          | expression LE expression 

boolean_operators: expression AND expression
                 | expression OR expression

record_creation: ID LBRACE field_assignments RBRACE

field_assignments: /* empty */
                 | field_assignments_commad

field_assignments_commad: field_assignment
                        | field_assignments_commad COMMA field_assignment

field_assignment: ID EQ expression

array_creation: ID LBRACK expression RBRACK OF expression

for: FOR ID ASSIGN expression TO expression DO expression

let: LET declaration_sequence IN expression_sequence END


/* DECLARATIONS */

declaration_sequence: /* empty string also possible*/
                    | declaration declaration_sequence

declaration: type_declaration
           | variable_declaration
           | function_declaration


/* DATA TYPES */

type_declaration: TYPE ID EQ type

type: ID
    | LBRACE type_fields RBRACE
    | ARRAY OF ID

type_fields: /* empty string */
           | type_fields_list

type_fields_list: ID COLON ID
                | type_fields_list COMMA ID COLON ID


/* VARIABLES */

variable_declaration: VAR ID ASSIGN expression
                    | VAR ID COLON ID ASSIGN expression


/* FUNCTIONS */

function_declaration: FUNCTION ID LPAREN type_fields RPAREN EQ expression
                    | FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ expression


/* VARIABLES AND EXPRESSIONS */

if_then_else: IF expression THEN expression ELSE expression

if_then: IF expression THEN expression

while: WHILE expression DO expression

break: BREAK

expression_sequence: expression
                   | expression_sequence SEMICOLON expression

expression_list_commad: expression
                        | expression_list_commad COMMA expression

assignment: lvalue ASSIGN expression
